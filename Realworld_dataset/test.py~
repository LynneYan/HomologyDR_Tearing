from __future__ import division

from sklearn.neighbors import kneighbors_graph
from sklearn.neighbors import NearestNeighbors
from sklearn.utils.graph import graph_shortest_path
from numpy import linalg as LA
import numpy as np
import math
from sklearn.metrics.pairwise import euclidean_distances
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import KernelPCA

n_neighbors=5
n_components=2
eigen_solver='auto'
n_jobs=1

def Landmark_MDS(D, ndims, landmarks):

    ALL_matrix = np.vstack((D, landmarks))
    G_landmark = euclidean_distances(landmarks, landmarks)
    G_D_landmark = euclidean_distances( landmarks,ALL_matrix)
    G_landmark = G_landmark ** 2
    G_landmark *= -0.5

    n = len(landmarks)
    N = len(D)
    
    H = np.eye(n) - np.ones((n, n))/n
    M = -H.dot(G_landmark**2).dot(H)/2


    eigenval, eigenxy = LA.eig(M)

    idx = eigenval.argsort()[::-1]   
    eigenval = eigenval[idx]
    eigenxy = eigenxy[:,idx]
    
    val = eigenval[0: ndims]
    xy = eigenxy[:, 0:ndims]

    
    for i in range (0, ndims):
        xy[:, i] = xy[:, i]*math.sqrt(val[i])


    xy1 = np.zeros((N+n, ndims),dtype=complex)
    LT = xy.transpose()

    for i in range (0, ndims):
        LT[i, :] = LT[i, :]/val[i]
    deltan = G_landmark.mean(0)
    
    for x in range (0, N+n):
        deltax = G_D_landmark[:, x]
        xy1[x, :] = 1/2 * (LT.dot((deltan-deltax))).transpose()

    return xy1[0 : N], xy1[N:n+N]


def modified_Landmark_MDS(D, ndims, dist_matrix):

    G_landmark = dist_matrix
    G_landmark = G_landmark ** 2
    G_landmark *= -0.5

    xy = KernelPCA(n_components=ndims,kernel="precomputed",eigen_solver='auto',
                                     tol=0, max_iter=None,
                                     n_jobs=1).fit_transform(G_landmark)

    return xy


"""
X = np.loadtxt("X_norm.txt")
sample_size = 40
sample = np.random.permutation(len(X))
sample = sample[range(sample_size)]

Y, proj_landmarks = Landmark_MDS(X, 2, X[sample, :])

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
ax.scatter(Y[:, 0], Y[:, 1],cmap=plt.cm.Spectral, c= X[:,0])
ax.scatter(proj_landmarks[:, 0], proj_landmarks[:, 1], c= 'black',s=100,  marker=(5, 1))
ax.set_title("Normalized data")
plt.show()
"""
